let activeVote = null;

function getOpts(msg) {
  return msg.message_thread_id
    ? { message_thread_id: msg.message_thread_id }
    : {};
}

const voteCommand = bot => {
  bot.on('poll_answer', pollAnswer => {
    if (!activeVote || pollAnswer.poll_id !== activeVote.id) {
      return;
    }

    const userId = pollAnswer.user.id;
    const userName =
      pollAnswer.user.first_name || pollAnswer.user.username || 'Unknown';

    activeVote.votes[userId] = {
      id: userId,
      name: userName,
      options: pollAnswer.option_ids,
    };

    activeVote.totalVoters = Object.keys(activeVote.votes).length;
  });

  bot.onText(/^\/vote$/, msg => {
    bot.sendMessage(
      msg.chat.id,
      'üìä *C√°ch s·ª≠ d·ª•ng /vote:*\n' +
        '‚Ä¢ `/vote [question] | [option1] | [option2] | [option3] | ...` - T·∫°o vote v·ªõi c√¢u h·ªèi v√† c√°c l·ª±a ch·ªçn\n' +
        '‚Ä¢ `/clearvote` - X√≥a t·∫•t c·∫£ vote ƒëang ho·∫°t ƒë·ªông\n' +
        '\nV√≠ d·ª•: `/vote S√¢n XX ng√†y YY gi·ªù ZZ | 0 | +1 | +2`\n' +
        '\n*L∆∞u √Ω:* T·ªëi thi·ªÉu 2 l·ª±a ch·ªçn, t·ªëi ƒëa 10 l·ª±a ch·ªçn',
      getOpts(msg)
    );
  });

  bot.onText(/^\/vote\s+(.+)$/, async (msg, match) => {
    const pollText = match[1];
    const parts = pollText
      .split('|')
      .map(part => part.trim())
      .filter(part => part);

    if (parts.length < 3) {
      bot.sendMessage(
        msg.chat.id,
        '‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 1 c√¢u h·ªèi v√† 2 l·ª±a ch·ªçn.\n' +
          'V√≠ d·ª•: `/vote S√¢n XX ng√†y YY gi·ªù ZZ | 0 | +1`',
        getOpts(msg)
      );
      return;
    }

    if (parts.length > 11) {
      bot.sendMessage(
        msg.chat.id,
        '‚ö†Ô∏è T·ªëi ƒëa 10 l·ª±a ch·ªçn cho m·ªói vote.\n' +
          'Vui l√≤ng gi·∫£m s·ªë l∆∞·ª£ng l·ª±a ch·ªçn.',
        getOpts(msg)
      );
      return;
    }

    if (activeVote) {
      bot.sendMessage(
        msg.chat.id,
        '‚ö†Ô∏è Hi·ªán t·∫°i ƒë√£ c√≥ m·ªôt vote ƒëang ho·∫°t ƒë·ªông. H√£y xo√° vote c≈© tr∆∞·ªõc khi t·∫°o vote m·ªõi b·∫±ng l·ªánh /clearvote.',
        getOpts(msg)
      );
      return;
    }

    const question = parts[0];
    const options = parts.slice(1);

    bot
      .sendPoll(msg.chat.id, question, options, {
        is_anonymous: false,
        allows_multiple_answers: false,
        explanation: `Vote ƒë∆∞·ª£c t·∫°o b·ªüi ${msg.from.first_name || msg.from.username || 'Unknown'}`,
      })
      .then(pollMessage => {
        const voteId = pollMessage.poll.id;
        activeVote = {
          id: voteId,
          question,
          options,
          chatId: msg.chat.id,
          messageId: pollMessage.message_id,
          createdBy: msg.from.first_name || msg.from.username || 'Unknown',
          createdAt: new Date(),
          totalVoters: 0,
          votes: {},
        };
      })
      .catch(error => {
        console.error('Error creating vote:', error);
        bot.sendMessage(
          msg.chat.id,
          '‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o vote. Vui l√≤ng th·ª≠ l·∫°i.',
          getOpts(msg)
        );
      });
  });

  bot.onText(/^\/clearvote$/, msg => {
    if (!activeVote) {
      bot.sendMessage(
        msg.chat.id,
        'üì≠ Kh√¥ng c√≥ vote n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ x√≥a.',
        getOpts(msg)
      );
      return;
    }

    activeVote = null;

    bot.sendMessage(msg.chat.id, 'üóëÔ∏è ƒê√£ xo√° vote.', getOpts(msg));
  });

  bot.onText(/^\/demvote$/, msg => {
    if (!activeVote) {
      bot.sendMessage(
        msg.chat.id,
        'üì≠ Kh√¥ng c√≥ vote n√†o ƒëang ho·∫°t ƒë·ªông.',
        getOpts(msg)
      );
      return;
    }

    const { question, options, votes, totalVoters } = activeVote;
    let resultText = `üìä *K·∫øt qu·∫£ vote hi·ªán t·∫°i:*\n*${question}*\n\n`;

    options.forEach((option, idx) => {
      const voters = Object.values(votes)
        .filter(vote => vote.options.includes(idx))
        .map(vote => vote.name);

      resultText += `*${option}* (${voters.length})\n`;
      if (voters.length > 0) {
        resultText += `*Ai vote?* ${voters.join(', ')}\n`;
      } else {
        resultText += '*Ai vote?* Ch∆∞a c√≥ ai vote\n';
      }
      resultText += '\n';
    });

    resultText += `*S·ªë ng∆∞·ªùi vote:* ${totalVoters || 0}`;

    bot.sendMessage(msg.chat.id, resultText, {
      ...getOpts(msg),
      parse_mode: 'Markdown',
    });
  });
};

module.exports = voteCommand;
