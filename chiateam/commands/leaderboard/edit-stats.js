const {
  updatePlayerStatsDirect,
  getPlayerStats,
} = require('../../db/leaderboard');
const { sendMessage } = require('../../utils/chat');

const bot = require('../../bot');

const editStatsCommand = () => {
  // Handle command with parameters
  bot.onText(/\/edit-stats (.+)/, async (msg, match) => {
    try {
      const args = match[1].trim();

      // Parse the command: player_id total_match total_win total_lose
      const parts = args.split(' ');

      if (parts.length !== 5) {
        sendMessage(
          msg,
          'DEFAULT',
          '‚ùå **C√∫ ph√°p kh√¥ng ƒë√∫ng!**\n\n' +
            'ÔøΩÔøΩ **C√°ch s·ª≠ d·ª•ng:**\n' +
            '`/edit-stats player_id total_match total_win total_lose total_draw`\n\n' +
            '**V√≠ d·ª•:**\n' +
            '`/edit-stats 1001 10 7 2 1`\n' +
            '`/edit-stats 1002 5 2 2 1`',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      const playerId = parseInt(parts[0]);
      const totalMatch = parseInt(parts[1]);
      const totalWin = parseInt(parts[2]);
      const totalLose = parseInt(parts[3]);
      const totalDraw = parseInt(parts[4]);

      // Validate player ID
      if (isNaN(playerId) || playerId <= 0) {
        sendMessage(
          msg,
          'DEFAULT',
          '‚ùå **ID ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá!**\n\n' +
            'ÔøΩÔøΩ **L∆∞u √Ω:** ID ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      // Validate match statistics
      if (isNaN(totalMatch) || totalMatch < 0) {
        sendMessage(
          msg,
          'DEFAULT',
          '‚ùå **S·ªë tr·∫≠n ƒë·∫•u kh√¥ng h·ª£p l·ªá!**\n\n' +
            'ÔøΩÔøΩ **L∆∞u √Ω:** S·ªë tr·∫≠n ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      if (isNaN(totalWin) || totalWin < 0) {
        sendMessage(
          msg,
          'DEFAULT',
          '‚ùå **S·ªë tr·∫≠n th·∫Øng kh√¥ng h·ª£p l·ªá!**\n\n' +
            'ÔøΩÔøΩ **L∆∞u √Ω:** S·ªë tr·∫≠n th·∫Øng ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      if (isNaN(totalLose) || totalLose < 0) {
        sendMessage(
          msg,
          'DEFAULT',
          '‚ùå **S·ªë tr·∫≠n thua kh√¥ng h·ª£p l·ªá!**\n\n' +
            'ÔøΩÔøΩ **L∆∞u √Ω:** S·ªë tr·∫≠n thua ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      if (isNaN(totalDraw) || totalDraw < 0) {
        sendMessage(
          msg,
          'DEFAULT',
          '‚ùå **S·ªë tr·∫≠n h√≤a kh√¥ng h·ª£p l·ªá!**\n\n' +
            'üìù **L∆∞u √Ω:** S·ªë tr·∫≠n h√≤a ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m',
          { parse_mode: 'Markdown' }
        );
        return;
      }

      // Validate logic: total_match = total_win + total_lose + total_draw
      if (totalMatch !== totalWin + totalLose + totalDraw) {
        sendMessage(
          msg,
          'DEFAULT',
          '‚ùå **D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!**\n\n' +
            'ÔøΩÔøΩ **L∆∞u √Ω:** T·ªïng s·ªë tr·∫≠n = S·ªë tr·∫≠n th·∫Øng + S·ªë tr·∫≠n thua\n\n' +
            'ÔøΩÔøΩ **D·ªØ li·ªáu hi·ªán t·∫°i:**\n' +
            `   ‚Ä¢ T·ªïng tr·∫≠n: ${totalMatch}\n` +
            `   ‚Ä¢ Th·∫Øng: ${totalWin}\n` +
            `   ‚Ä¢ Thua: ${totalLose}\n` +
            `   ‚Ä¢ T·ªïng: ${totalWin + totalLose}`,
          { parse_mode: 'Markdown' }
        );
        return;
      }

      // Get current stats for comparison
      const currentStats = await getPlayerStats(playerId);
      const winrate =
        totalMatch > 0 ? Math.round((totalWin / totalMatch) * 1000) / 1000 : 0;
      const winratePercent = (winrate * 100).toFixed(1);

      // Update player statistics
      await updatePlayerStatsDirect(playerId, totalMatch, totalWin, totalLose);

      // Create response message
      let message = '‚úèÔ∏è **CH·ªàNH S·ª¨A TH·ªêNG K√ä** ‚úèÔ∏è\n\n';
      message += `ÔøΩÔøΩ **ID ng∆∞·ªùi ch∆°i:** ${playerId}\n\n`;

      if (currentStats) {
        message += 'ÔøΩÔøΩ **Th·ªëng k√™ c≈©:**\n';
        message += `   ‚Ä¢ Tr·∫≠n: ${currentStats.total_match} | Th·∫Øng: ${currentStats.total_win} | Thua: ${currentStats.total_lose}\n`;
        message += `   ‚Ä¢ Winrate: ${(currentStats.winrate * 100).toFixed(1)}%\n\n`;
      }

      message += 'ÔøΩÔøΩ **Th·ªëng k√™ m·ªõi:**\n';
      message += `   ‚Ä¢ Tr·∫≠n: ${totalMatch} | Th·∫Øng: ${totalWin} | Thua: ${totalLose}\n`;
      message += `   ‚Ä¢ Winrate: ${winratePercent}%\n\n`;

      if (currentStats) {
        const matchDiff = totalMatch - currentStats.total_match;
        const winDiff = totalWin - currentStats.total_win;
        const loseDiff = totalLose - currentStats.total_lose;

        message += 'ÔøΩÔøΩ **Thay ƒë·ªïi:**\n';
        message += `   ‚Ä¢ Tr·∫≠n: ${matchDiff > 0 ? '+' : ''}${matchDiff}\n`;
        message += `   ‚Ä¢ Th·∫Øng: ${winDiff > 0 ? '+' : ''}${winDiff}\n`;
        message += `   ‚Ä¢ Thua: ${loseDiff > 0 ? '+' : ''}${loseDiff}\n\n`;
      }

      message += 'üí° S·ª≠ d·ª•ng `/leaderboard` ƒë·ªÉ xem b·∫£ng x·∫øp h·∫°ng m·ªõi';

      sendMessage(msg, 'STATISTICS', message, {
        parse_mode: 'Markdown',
      });
    } catch (error) {
      console.error('Error editing stats:', error);
      sendMessage(
        msg,
        'DEFAULT',
        '‚ùå C√≥ l·ªói x·∫£y ra khi ch·ªânh s·ª≠a th·ªëng k√™. Vui l√≤ng th·ª≠ l·∫°i sau.'
      );
    }
  });

  // Handle command without parameters
  bot.onText(/^\/edit-stats$/, msg => {
    sendMessage(
      msg,
      'DEFAULT',
      'üìù **C√°ch s·ª≠ d·ª•ng l·ªánh edit-stats:**\n\n' +
        'ÔøΩÔøΩ **C√∫ ph√°p:**\n' +
        '`/edit-stats player_id total_match total_win total_lose`\n\n' +
        '**V√≠ d·ª•:**\n' +
        '`/edit-stats 1001 10 7 3` - 10 tr·∫≠n, 7 th·∫Øng, 3 thua\n' +
        '`/edit-stats 1002 5 2 3` - 5 tr·∫≠n, 2 th·∫Øng, 3 thua\n\n' +
        'üìù **L∆∞u √Ω:**\n' +
        '‚Ä¢ T·ªïng s·ªë tr·∫≠n = S·ªë tr·∫≠n th·∫Øng + S·ªë tr·∫≠n thua\n' +
        '‚Ä¢ T·∫•t c·∫£ s·ªë li·ªáu ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m\n' +
        '‚Ä¢ Winrate s·∫Ω ƒë∆∞·ª£c t√≠nh t·ª± ƒë·ªông',
      { parse_mode: 'Markdown' }
    );
  });
};

module.exports = editStatsCommand;
